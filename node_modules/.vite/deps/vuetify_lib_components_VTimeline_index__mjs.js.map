{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTimeline/VTimeline.tsx", "../../vuetify/src/components/VTimeline/VTimelineDivider.tsx", "../../vuetify/src/components/VTimeline/VTimelineItem.tsx"],
  "sourcesContent": ["// Styles\nimport './VTimeline.sass'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\n// Types\nimport type { Prop } from 'vue'\n\nexport type TimelineDirection = 'vertical' | 'horizontal'\nexport type TimelineSide = 'start' | 'end' | undefined\nexport type TimelineAlign = 'center' | 'start'\nexport type TimelineTruncateLine = 'start' | 'end' | 'both' | undefined\n\nexport const VTimeline = defineComponent({\n  name: 'VTimeline',\n\n  props: {\n    align: {\n      type: String,\n      default: 'center',\n      validator: (v: any) => ['center', 'start'].includes(v),\n    } as Prop<TimelineAlign>,\n    direction: {\n      type: String,\n      default: 'vertical',\n      validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n    } as Prop<TimelineDirection>,\n    side: {\n      type: String,\n      validator: (v: any) => v == null || ['start', 'end'].includes(v),\n    } as Prop<TimelineSide>,\n    lineInset: {\n      type: [String, Number],\n      default: 0,\n    },\n    lineThickness: {\n      type: [String, Number],\n      default: 2,\n    },\n    lineColor: String,\n    truncateLine: {\n      type: String,\n      validator: (v: any) => ['start', 'end', 'both'].includes(v),\n    } as Prop<TimelineTruncateLine>,\n\n    ...makeDensityProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { densityClasses } = useDensity(props)\n\n    provideDefaults({\n      VTimelineDivider: {\n        lineColor: toRef(props, 'lineColor'),\n      },\n      VTimelineItem: {\n        density: toRef(props, 'density'),\n        lineInset: toRef(props, 'lineInset'),\n      },\n    })\n\n    const sideClasses = computed(() => {\n      const side = props.side ? props.side : props.density !== 'default' ? 'end' : null\n\n      return side && `v-timeline--side-${side}`\n    })\n\n    const truncateClasses = computed(() => {\n      const classes = [\n        'v-timeline--truncate-line-start',\n        'v-timeline--truncate-line-end',\n      ]\n\n      switch (props.truncateLine) {\n        case 'both': return classes\n        case 'start': return classes[0]\n        case 'end': return classes[1]\n        default: return null\n      }\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-timeline',\n          `v-timeline--${props.direction}`,\n          `v-timeline--align-${props.align}`,\n          truncateClasses.value,\n          {\n            'v-timeline--inset-line': !!props.lineInset,\n          },\n          themeClasses.value,\n          densityClasses.value,\n          sideClasses.value,\n        ]}\n        style={{\n          '--v-timeline-line-thickness': convertToUnit(props.lineThickness),\n        }}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n", "// Components\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\nexport const VTimelineDivider = defineComponent({\n  name: 'VTimelineDivider',\n\n  props: {\n    dotColor: String,\n    fillDot: Boolean,\n    hideDot: Boolean,\n    icon: IconValue,\n    iconColor: String,\n    lineColor: String,\n\n    ...makeRoundedProps(),\n    ...makeSizeProps(),\n    ...makeElevationProps(),\n  },\n\n  setup (props, { slots }) {\n    const { sizeClasses, sizeStyles } = useSize(props, 'v-timeline-divider__dot')\n    const { backgroundColorStyles, backgroundColorClasses } = useBackgroundColor(toRef(props, 'dotColor'))\n    const { roundedClasses } = useRounded(props, 'v-timeline-divider__dot')\n    const { elevationClasses } = useElevation(props)\n    const {\n      backgroundColorClasses: lineColorClasses,\n      backgroundColorStyles: lineColorStyles,\n    } = useBackgroundColor(toRef(props, 'lineColor'))\n\n    provideDefaults({\n      VIcon: {\n        color: toRef(props, 'iconColor'),\n        icon: toRef(props, 'icon'),\n        size: toRef(props, 'size'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-timeline-divider',\n          {\n            'v-timeline-divider--fill-dot': props.fillDot,\n          },\n        ]}\n      >\n        <div\n          class={[\n            'v-timeline-divider__before',\n            lineColorClasses.value,\n          ]}\n          style={ lineColorStyles.value }\n        />\n\n        { !props.hideDot && (\n          <div\n            key=\"dot\"\n            class={[\n              'v-timeline-divider__dot',\n              elevationClasses.value,\n              roundedClasses.value,\n              sizeClasses.value,\n            ]}\n            style={ sizeStyles.value }\n          >\n            <div\n              class={[\n                'v-timeline-divider__inner-dot',\n                backgroundColorClasses.value,\n                roundedClasses.value,\n              ]}\n              style={ backgroundColorStyles.value }\n            >\n              { slots.default?.() ?? (props.icon ? (<VIcon />) : undefined) }\n            </div>\n          </div>\n        ) }\n\n        <div\n          class={[\n            'v-timeline-divider__after',\n            lineColorClasses.value,\n          ]}\n          style={ lineColorStyles.value }\n        />\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VTimelineDivider = InstanceType<typeof VTimelineDivider>\n", "// Components\nimport { VTimelineDivider } from './VTimelineDivider'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeElevationProps } from '@/composables/elevation'\nimport { makeRoundedProps } from '@/composables/rounded'\nimport { makeSizeProps } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport type { PropType } from 'vue'\nimport { ref, watch } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\n\nexport const VTimelineItem = defineComponent({\n  name: 'VTimelineItem',\n\n  props: {\n    density: String as PropType<'default' | 'compact'>,\n    dotColor: String,\n    fillDot: Boolean,\n    hideDot: Boolean,\n    hideOpposite: {\n      type: Boolean,\n      default: undefined,\n    },\n    icon: IconValue,\n    iconColor: String,\n    lineInset: [Number, String],\n\n    ...makeRoundedProps(),\n    ...makeElevationProps(),\n    ...makeSizeProps(),\n    ...makeTagProps(),\n    ...makeDimensionProps(),\n  },\n\n  setup (props, { slots }) {\n    const { dimensionStyles } = useDimension(props)\n\n    const dotSize = ref(0)\n    const dotRef = ref<VTimelineDivider>()\n    watch(dotRef, newValue => {\n      if (!newValue) return\n      dotSize.value = newValue.$el.querySelector('.v-timeline-divider__dot')?.getBoundingClientRect().width ?? 0\n    }, {\n      flush: 'post',\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-timeline-item',\n          {\n            'v-timeline-item--fill-dot': props.fillDot,\n          },\n        ]}\n        style={{\n          '--v-timeline-dot-size': convertToUnit(dotSize.value),\n          '--v-timeline-line-inset': props.lineInset ? `calc(var(--v-timeline-dot-size) / 2 + ${convertToUnit(props.lineInset)})` : convertToUnit(0),\n        }}\n      >\n        <div\n          class=\"v-timeline-item__body\"\n          style={ dimensionStyles.value }\n        >\n          { slots.default?.() }\n        </div>\n\n        <VTimelineDivider\n          ref={ dotRef }\n          hideDot={ props.hideDot }\n          icon={ props.icon }\n          iconColor={ props.iconColor }\n          size={ props.size }\n          elevation={ props.elevation }\n          dotColor={ props.dotColor }\n          fillDot={ props.fillDot }\n          rounded={ props.rounded }\n          v-slots={{ default: slots.icon }}\n        />\n\n        { props.density !== 'compact' && (\n          <div class=\"v-timeline-item__opposite\">\n            { !props.hideOpposite && slots.opposite?.() }\n          </div>\n        ) }\n      </div>\n    ))\n\n    return {}\n  },\n})\n"],
  "mappings": "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",
  "names": ["VTimeline", "defineComponent", "name", "props", "align", "type", "String", "default", "validator", "v", "includes", "direction", "side", "lineInset", "Number", "lineThickness", "lineColor", "truncateLine", "makeDensityProps", "makeTagProps", "makeThemeProps", "setup", "slots", "themeClasses", "provideTheme", "densityClasses", "useDensity", "provideDefaults", "VTimelineDivider", "toRef", "VTimelineItem", "density", "sideClasses", "computed", "truncateClasses", "classes", "useRender", "value", "convertToUnit", "VTimelineDivider", "defineComponent", "name", "props", "dotColor", "String", "fillDot", "Boolean", "hideDot", "icon", "IconValue", "iconColor", "lineColor", "makeRoundedProps", "makeSizeProps", "makeElevationProps", "setup", "slots", "sizeClasses", "sizeStyles", "useSize", "backgroundColorStyles", "backgroundColorClasses", "useBackgroundColor", "toRef", "roundedClasses", "useRounded", "elevationClasses", "useElevation", "lineColorClasses", "lineColorStyles", "provideDefaults", "VIcon", "color", "size", "useRender", "value", "default", "undefined", "VTimelineItem", "defineComponent", "name", "props", "density", "String", "dotColor", "fillDot", "Boolean", "hideDot", "hideOpposite", "type", "default", "undefined", "icon", "IconValue", "iconColor", "lineInset", "Number", "makeRoundedProps", "makeElevationProps", "makeSizeProps", "makeTagProps", "makeDimensionProps", "setup", "slots", "dimensionStyles", "useDimension", "dotSize", "ref", "dotRef", "watch", "newValue", "value", "$el", "querySelector", "getBoundingClientRect", "width", "flush", "useRender", "convertToUnit", "size", "elevation", "rounded", "opposite"]
}
